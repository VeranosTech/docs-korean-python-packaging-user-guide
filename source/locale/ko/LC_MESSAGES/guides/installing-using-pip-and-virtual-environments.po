# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2017, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 11:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../guides/installing-using-pip-and-virtual-environments.rst:2
msgid "Installing packages using pip and virtual environments"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:4
msgid ""
"This guide discusses how to install packages using :ref:`pip` and a "
"virtual environment manager: either :ref:`venv` for Python 3 or "
":ref:`virtualenv` for Python 2. These are the lowest-level tools for "
"managing Python packages and are recommended if higher-level tools do not"
" suit your needs."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:9
msgid ""
"This doc uses the term **package** to refer to a :term:`Distribution "
"Package`  which is different from a :term:`Import Package` that which is "
"used to import modules in your Python source code."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:15
msgid "Installing pip"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:17
msgid ""
":ref:`pip` is the reference Python package manager. It's used to install "
"and update packages. You'll need to make sure you have the latest version"
" of pip installed."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:23
msgid "Windows"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:25
msgid ""
"The Python installers for Windows include pip. You should be able to "
"access pip using:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:33
msgid "You can make sure that pip is up-to-date by running:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:41
msgid "Linux and macOS"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:43
msgid ""
"Debian and most other distributions include a `python-pip`_ package, if "
"you want to use the Linux distribution-provided versions of pip see "
":doc:`/guides/installing-using-linux-tools`."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:47
msgid ""
"You can also install pip yourself to ensure you have the latest version. "
"It's recommended to use the system pip to bootstrap a user installation "
"of pip:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:54
msgid "Afterwards, you should have the newest pip installed in your user site:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:65
msgid "Installing virtualenv"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:67
msgid ""
"If you are using Python 3.3 or newer, the :mod:`venv` module is the "
"preferred way to create and manage virtual environments. venv is included"
" in the Python standard library and requires no additional installation. "
"If you are using venv, you may skip this section."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:73
msgid ""
":ref:`virtualenv` is used to manage Python packages for different "
"projects. Using virtualenv allows you to avoid installing Python packages"
" globally which could break system tools or other projects. You can "
"install virtualenv using pip."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:78
#: ../../guides/installing-using-pip-and-virtual-environments.rst:108
#: ../../guides/installing-using-pip-and-virtual-environments.rst:137
#: ../../guides/installing-using-pip-and-virtual-environments.rst:150
msgid "On macOS and Linux:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:84
#: ../../guides/installing-using-pip-and-virtual-environments.rst:114
#: ../../guides/installing-using-pip-and-virtual-environments.rst:157
msgid "On Windows:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:93
msgid "Creating a virtual environment"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:95
msgid ""
":ref:`venv` (for Python 3) and :ref:`virtualenv` (for Python 2) allow you"
" to manage separate package installations for different projects. They "
"essentially allow you to create a \"virtual\" isolated Python "
"installation and install packages into that virtual installation. When "
"you switch projects, you can simply create a new virtual environment and "
"not have to worry about breaking the packages installed in the other "
"environments. It is always recommended to use a virtual environment while"
" developing Python applications."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:104
msgid ""
"To create a virtual environment, go to your project's directory and run "
"venv. If you are using Python 2, replace ``venv`` with ``virtualenv`` in "
"the below commands."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:120
msgid ""
"The second argument is the location to create the virtual environment. "
"Generally, you can just create this in your project and call it ``env``."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:123
msgid "venv will create a virtual Python installation in the ``env`` folder."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:125
msgid ""
"You should exclude your virtual environment directory from your version "
"control system using ``.gitignore`` or similar."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:130
msgid "Activating a virtual environment"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:132
msgid ""
"Before you can start installing or using packages in your virtual "
"environment you'll need to *activate* it. Activating a virtual "
"environment will put the virtual environment-specific ``python`` and "
"``pip`` executables into your shell's ``PATH``."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:143
msgid "On Windows::"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:147
msgid ""
"You can confirm you're in the virtual environment by checking the "
"location of your Python interpreter, it should point to the ``env`` "
"directory."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:165
msgid ""
"As long as your virtual environment is activated pip will install "
"packages into that specific environment and you'll be able to import and "
"use packages in your Python application."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:171
msgid "Leaving the virtual environment"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:173
msgid ""
"If you want to switch projects or otherwise leave your virtual "
"environment, simply run:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:179
msgid ""
"If you want to re-enter the virtual environment just follow the same "
"instructions above about activating a virtual environment. There's no "
"need to re-create the virtual environment."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:184
msgid "Installing packages"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:186
msgid ""
"Now that you're in your virtual environment you can install packages. "
"Let's install the excellent `Requests`_ library from the :term:`Python "
"Package Index (PyPI)`:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:193
msgid "pip should download requests and all of its dependencies and install them:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:214
msgid "Installing specific versions"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:216
msgid ""
"pip allows you to specify which version of a package to install using "
":term:`version specifiers <Version Specifier>`. For example, to install a"
" specific version of ``requests``:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:224
msgid "To install the latest ``2.x`` release of requests:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:230
msgid "To install pre-release versions of packages, use the ``--pre`` flag:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:238
msgid "Installing extras"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:240
msgid ""
"Some packages have optional `extras`_. You can tell pip to install these "
"by specifying the extra in brackets:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:252
msgid "Installing from source"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:254
msgid "pip can install a package directly from source, for example:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:261
msgid ""
"Additionally, pip can install packages from source in `development "
"mode`_, meaning that changes to the source directory will immediately "
"affect the installed package without needing to re-install:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:275
msgid "Installing from version control systems"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:277
msgid ""
"pip can install packages directly from their version control system. For "
"example, you can install directly from a git repository:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:284
msgid ""
"For more information on supported version control systems and syntax, see"
" pip's documentation on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:289
msgid "Installing from local archives"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:291
msgid ""
"If you have a local copy of a :term:`Distribution Package`'s archive (a "
"zip, wheel, or tar file) you can install it directly with pip:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:298
msgid ""
"If you have a directory containing archives of multiple packages, you can"
" tell pip to look for packages there and not to use the :term:`Python "
"Package Index (PyPI)` at all:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:306
msgid ""
"This is useful if you are installing packages on a system with limited "
"connectivity or if you want to strictly control the origin of "
"distribution packages."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:312
msgid "Using other package indexes"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:314
msgid ""
"If you want to download packages from a different index than the "
":term:`Python Package Index (PyPI)`, you can use the ``--index-url`` "
"flag:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:321
msgid ""
"If you want to allow packages from both the :term:`Python Package Index "
"(PyPI)` and a separate index, you can use the ``--extra-index-url`` flag "
"instead:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:331
msgid "Upgrading packages"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:333
msgid ""
"pip can upgrade packages in-place using the ``--upgrade`` flag. For "
"example, to install the latest version of ``requests`` and all of its "
"dependencies:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:342
msgid "Using requirements files"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:344
msgid ""
"Instead of installing packages individually, pip allows you to declare "
"all dependencies in a :ref:`Requirements File <pip:Requirements Files>`. "
"For example you could create a :file:`requirements.txt` file containing:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:353
msgid ""
"And tell pip to install all of the packages in this file using the ``-r``"
" flag:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:361
msgid "Freezing dependencies"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:363
msgid ""
"Pip can export a list of all installed packages and their versions using "
"the ``freeze`` command:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:370
msgid "Which will output a list of package specifiers such as:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:386
msgid ""
"This is useful for creating :ref:`pip:Requirements Files` that can re-"
"create the exact versions of all packages installed in an environment."
msgstr ""

