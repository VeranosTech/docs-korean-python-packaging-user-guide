# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2017, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 14:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/guides/supporting-multiple-python-versions.rst:5
msgid "Supporting multiple Python versions"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst
msgid "Page Status"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:7
msgid "Incomplete"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst
msgid "Last Reviewed"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:8
msgid "2014-12-24"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:12
msgid "Contents"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:37
msgid ""
"In addition to the work required to create a Python package, it is often "
"necessary that the package must be made available on different versions "
"of Python.  Different Python versions may contain different (or renamed) "
"standard library packages, and the changes between Python versions 2.x "
"and 3.x include changes in the language syntax."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:43
msgid ""
"Performed manually, all the testing required to ensure that the package "
"works correctly on all the target Python versions (and OSs!) could be "
"very time-consuming. Fortunately, several tools are available for dealing"
" with this, and these will briefly be discussed here."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:49
msgid "Automated testing and continuous integration"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:51
msgid ""
"Several hosted services for automated testing are available. These "
"services will typically monitor your source code repository (e.g. at "
"`Github <https://github.com>`_ or `Bitbucket <https://bitbucket.org>`_) "
"and run your project's test suite every time a new commit is made."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:56
msgid ""
"These services also offer facilities to run your project's test suite on "
"*multiple versions of Python*, giving rapid feedback about whether the "
"code will work, without the developer having to perform such tests "
"themselves."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:60
msgid ""
"Wikipedia has an extensive `comparison "
"<http://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software>`_"
" of many continuous-integration systems. There are two hosted services "
"which when used in conjunction provide automated testing across Linux, "
"Mac and Windows:"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:66
msgid ""
"`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS "
"environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 "
"bit while the macOS is 10.9.2 at the time of writing."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:69
msgid ""
"`Appveyor <http://www.appveyor.com>`_ provides a Windows environment "
"(Windows Server 2012)."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:80
msgid ""
"Both `Travis CI`_ and Appveyor_ require a `YAML "
"<http://www.yaml.org>`_-formatted file as specification for the "
"instructions for testing. If any tests fail, the output log for that "
"specific configuration can be inspected."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:85
msgid ""
"For Python projects that are intended to be deployed on both Python 2 and"
" 3 with a single-source strategy, there are a number of options."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:89
msgid "Tools for single-source Python packages"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:91
msgid ""
"`six <http://pythonhosted.org/six/>`_ is a tool developed by Benjamin "
"Peterson for wrapping over the differences between Python 2 and Python 3."
" The six_ package has enjoyed widespread use and may be regarded as a "
"reliable way to write a single-source Python module that can be use in "
"both Python 2 and 3. The six_ module can be used from as early as Python "
"2.5. A tool called `modernize <https://pypi.org/project/modernize>`_, "
"developed by Armin Ronacher, can be used to automatically apply the code "
"modifications provided by six_."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:100
msgid ""
"Similar to six_, `python-future <http://python-"
"future.org/overview.html>`_ is a package that provides a compatibility "
"layer between Python 2 and Python 3 source code; however, unlike six_, "
"this package aims to provide interoperability between Python 2 and Python"
" 3 with a language syntax that matches one of the two Python versions: "
"one may use"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:107
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:108
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:110
msgid ""
"Because of the bi-directionality, python-future_ offers a pathway to "
"converting a Python 2 package to Python 3 syntax module-by-module. "
"However, in contrast to six_, python-future_ is supported only from "
"Python 2.6. Similar to modernize_ for six_, python-future_ comes with two"
" scripts called ``futurize`` and ``pasteurize`` that can be applied to "
"either a Python 2 module or a Python 3 module respectively."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:117
msgid ""
"Use of six_ or python-future_ adds an additional runtime dependency to "
"your package: with python-future_, the ``futurize`` script can be called "
"with the ``--stage1`` option to apply only the changes that Python 2.6+ "
"already provides for forward-compatibility to Python 3. Any remaining "
"compatibility problems would require manual changes."
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:124
msgid "What's in which Python?"
msgstr ""

#: ../../source/guides/supporting-multiple-python-versions.rst:126
msgid ""
"Ned Batchelder provides a list of changes in each Python release for "
"`Python 2 "
"<https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, "
"`Python 3.0-3.3 "
"<https://nedbatchelder.com/blog/201310/whats_in_which_python_3.html>`__ "
"and `Python 3.4-3.6 "
"<https://nedbatchelder.com/blog/201803/whats_in_which_python_3436.html>`__."
" These lists may be used to check whether any changes between Python "
"versions may affect your package."
msgstr ""

