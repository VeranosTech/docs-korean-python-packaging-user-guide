# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2017, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 14:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/guides/packaging-namespace-packages.rst:3
msgid "Packaging namespace packages"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:5
msgid ""
"Namespace packages allow you to split the sub-packages and modules within"
" a single :term:`package <Import Package>` across multiple, separate "
":term:`distribution packages <Distribution Package>` (referred to as "
"**distributions** in this document to avoid ambiguity). For example, if "
"you have the following package structure:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:24
msgid "And you use this package in your code like so::"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:29
msgid "Then you can break these sub-packages into two separate distributions:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:46
msgid "Each sub-package can now be separately installed, used, and versioned."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:48
msgid ""
"Namespace packages can be useful for a large collection of loosely-"
"related packages (such as a large corpus of client libraries for multiple"
" products from a single company). However, namespace packages come with "
"several caveats and are not appropriate in all cases. A simple "
"alternative is to use a prefix on all of your distributions such as "
"``import mynamespace_subpackage_a`` (you could even use ``import "
"mynamespace_subpackage_a as subpackage_a`` to keep the import object "
"short)."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:58
msgid "Creating a namespace package"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:60
msgid ""
"There are currently three different approaches to creating namespace "
"packages:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:62
msgid ""
"Use `native namespace packages`_. This type of namespace package is "
"defined in :pep:`420` and is available in Python 3.3 and later. This is "
"recommended if packages in your namespace only ever need to support "
"Python 3 and installation via ``pip``."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:66
msgid ""
"Use `pkgutil-style namespace packages`_. This is recommended for new "
"packages that need to support Python 2 and 3 and installation via both "
"``pip`` and ``python setup.py install``."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:69
msgid ""
"Use `pkg_resources-style namespace packages`_. This method is recommended"
" if you need compatibility with packages already using this method or if "
"your package needs to be zip-safe."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:73
msgid ""
"While native namespace packages and pkgutil-style namespace packages are "
"largely compatible, pkg_resources-style namespace packages are not "
"compatible with the other methods. It's inadvisable to use different "
"methods in different distributions that provide packages to the same "
"namespace."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:80
msgid "Native namespace packages"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:82
msgid ""
"Python 3.3 added **implicit** namespace packages from :pep:`420`. All "
"that is required to create a native namespace package is that you just "
"omit :file:`__init__.py` from the namespace package directory. An example"
" file structure:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:97
msgid ""
"It is extremely important that every distribution that uses the namespace"
" package omits the :file:`__init__.py` or uses a pkgutil-style "
":file:`__init__.py`. If any distribution does not, it will cause the "
"namespace logic to fail and the other sub-packages will not be "
"importable."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:102
msgid ""
"Because ``mynamespace`` doesn't contain an :file:`__init__.py`, "
":func:`setuptools.find_packages` won't find the sub-package. You must "
"explicitly list all packages in your :file:`setup.py`. For example:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:116
msgid ""
"A complete working example of two native namespace packages can be found "
"in the `native namespace package example project`_."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:122
msgid ""
"Because native and pkgutil-style namespace packages are largely "
"compatible, you can use native namespace packages in the distributions "
"that only support Python 3 and pkgutil-style namespace packages in the "
"distributions that need to support Python 2 and 3."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:128
msgid "pkgutil-style namespace packages"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:130
msgid ""
"Python 2.3 introduced the `pkgutil`_ module and the `extend_path`_ "
"function. This can be used to declare namespace packages that need to be "
"compatible with both Python 2.3+ and Python 3. This is the recommended "
"approach for the highest level of compatibility."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:135
msgid ""
"To create a pkgutil-style namespace package, you need to provide an "
":file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:147
#: ../../source/guides/packaging-namespace-packages.rst:193
msgid ""
"The :file:`__init__.py` file for the namespace package needs to contain "
"**only** the following:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:154
#: ../../source/guides/packaging-namespace-packages.rst:200
msgid ""
"**Every** distribution that uses the namespace package must include an "
"identical :file:`__init__.py`. If any distribution does not, it will "
"cause the namespace logic to fail and the other sub-packages will not be "
"importable.  Any additional code in :file:`__init__.py` will be "
"inaccessible."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:159
msgid ""
"A complete working example of two pkgutil-style namespace packages can be"
" found in the `pkgutil namespace example project`_."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:170
msgid "pkg_resources-style namespace packages"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:172
msgid ""
"`Setuptools`_ provides the `pkg_resources.declare_namespace`_ function "
"and the ``namespace_packages`` argument to :func:`~setuptools.setup`. "
"Together these can be used to declare namespace packages. While this "
"approach is no longer recommended, it is widely present in most existing "
"namespace packages. If you are creating a new distribution within an "
"existing namespace package that uses this method then it's recommended to"
" continue using this as the different methods are not cross-compatible "
"and it's not advisable to try to migrate an existing package."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:181
msgid ""
"To create a pkg_resources-style namespace package, you need to provide an"
" :file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:205
msgid ""
"Some older recommendations advise the following in the namespace package "
":file:`__init__.py`:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:215
msgid ""
"The idea behind this was that in the rare case that setuptools isn't "
"available packages would fall-back to the pkgutil-style packages. This "
"isn't advisable because pkgutil and pkg_resources-style namespace "
"packages are not cross-compatible. If the presence of setuptools is a "
"concern then the package should just explicitly depend on setuptools via "
"``install_requires``."
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:222
msgid ""
"Finally, every distribution must provide the ``namespace_packages`` "
"argument to :func:`~setuptools.setup` in :file:`setup.py`. For example:"
msgstr ""

#: ../../source/guides/packaging-namespace-packages.rst:236
msgid ""
"A complete working example of two pkg_resources-style namespace packages "
"can be found in the `pkg_resources namespace example project`_."
msgstr ""

