# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2017, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 11:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../guides/distributing-packages-using-setuptools.rst:5
msgid "Packaging and distributing projects"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:7
msgid ""
"This section covers the basics of how to configure, package and "
"distribute your own Python projects.  It assumes that you are already "
"familiar with the contents of the :doc:`/tutorials/installing-packages` "
"page."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:11
msgid ""
"The section does *not* aim to cover best practices for Python project "
"development as a whole.  For example, it does not provide guidance or "
"tool recommendations for version control, documentation, or testing."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:15
msgid ""
"For more reference material, see `Building and Distributing Packages "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html>`_ in the "
":ref:`setuptools` docs, but note that some advisory content there may be "
"outdated. In the event of conflicts, prefer the advice in the Python "
"Packaging User Guide."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:23
msgid "Contents"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:26
msgid "Requirements for packaging and distributing"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:28
msgid ""
"First, make sure you have already fulfilled the :ref:`requirements for "
"installing packages <installing_requirements>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:31
msgid "Install \"twine\" [1]_:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:37
msgid ""
"You'll need this to upload your project :term:`distributions "
"<Distribution Package>` to :term:`PyPI <Python Package Index (PyPI)>` "
"(see :ref:`below <Uploading your Project to PyPI>`)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:43
msgid "Configuring your project"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:47
msgid "Initial files"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:50
msgid "setup.py"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:52
msgid ""
"The most important file is :file:`setup.py` which exists at the root of "
"your project directory. For an example, see the `setup.py "
"<https://github.com/pypa/sampleproject/blob/master/setup.py>`_ in the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:57
msgid ":file:`setup.py` serves two primary functions:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:59
msgid ""
"It's the file where various aspects of your project are configured. The "
"primary feature of :file:`setup.py` is that it contains a global "
"``setup()`` function.  The keyword arguments to this function are how "
"specific details of your project are defined.  The most relevant "
"arguments are explained in :ref:`the section below <setup() args>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:65
msgid ""
"It's the command line interface for running various commands that relate "
"to packaging tasks. To get a listing of available commands, run ``python "
"setup.py --help-commands``."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:71
msgid "setup.cfg"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:73
msgid ""
":file:`setup.cfg` is an ini file that contains option defaults for "
":file:`setup.py` commands.  For an example, see the `setup.cfg "
"<https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_ in the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:80
msgid "README.rst / README.md"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:82
msgid ""
"All projects should contain a readme file that covers the goal of the "
"project. The most common format is `reStructuredText "
"<http://docutils.sourceforge.net/rst.html>`_ with an \"rst\" extension, "
"although this is not a requirement; multiple variants of `Markdown "
"<https://daringfireball.net/projects/markdown/>`_ are supported as well "
"(look at ``setup()``'s :ref:`long_description_content_type <description>`"
" argument)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:89
msgid ""
"For an example, see `README.md "
"<https://github.com/pypa/sampleproject/blob/master/README.md>`_ from the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:93
msgid ""
"Projects using :ref:`setuptools` 0.6.27+ have standard readme files "
"(:file:`README.rst`, :file:`README.txt`, or :file:`README`) included in "
"source distributions by default. The built-in :ref:`distutils` library "
"adopts this behavior beginning in Python 3.7. Additionally, "
":ref:`setuptools` 36.4.0+ will include a :file:`README.md` if found. If "
"you are using setuptools, you don't need to list your readme file in "
":file:`MANIFEST.in`. Otherwise, include it to be explicit."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:102
msgid "MANIFEST.in"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:104
msgid ""
"A :file:`MANIFEST.in` is needed when you need to package additional files"
" that are not automatically included in a source distribution.  For "
"details on writing a :file:`MANIFEST.in` file, including a list of what's"
" included by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:109
msgid ""
"For an example, see the `MANIFEST.in "
"<https://github.com/pypa/sampleproject/blob/master/MANIFEST.in>`_ from "
"the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:113
msgid ":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:116
msgid "LICENSE.txt"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:118
msgid ""
"Every package should include a license file detailing the terms of "
"distribution. In many jurisdictions, packages without an explicit license"
" can not be legally used or distributed by anyone other than the "
"copyright holder. If you're unsure which license to choose, you can use "
"resources such as `GitHub's Choose a License "
"<https://choosealicense.com/>`_ or consult a lawyer."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:124
msgid ""
"For an example, see the `LICENSE.txt "
"<https://github.com/pypa/sampleproject/blob/master/LICENSE.txt>`_ from "
"the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:129
msgid "<your package>"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:131
msgid ""
"Although it's not required, the most common practice is to include your "
"Python modules and packages under a single top-level package that has the"
" same :ref:`name <setup() name>` as your project, or something very "
"close."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:135
msgid ""
"For an example, see the `sample "
"<https://github.com/pypa/sampleproject/tree/master/sample>`_ package "
"that's included in the `PyPA sample project "
"<https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:143
msgid "setup() args"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:145
msgid ""
"As mentioned above, the primary feature of :file:`setup.py` is that it "
"contains a global ``setup()`` function.  The keyword arguments to this "
"function are how specific details of your project are defined."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:149
msgid ""
"The most relevant arguments are explained below. Most of the snippets "
"given are taken from the `setup.py "
"<https://github.com/pypa/sampleproject/blob/master/setup.py>`_ contained "
"in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:158
msgid "name"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:164
msgid ""
"This is the name of your project, determining how your project is listed "
"on :term:`PyPI <Python Package Index (PyPI)>`.  Per :pep:`508`, valid "
"project names must:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:168
msgid ""
"Consist only of ASCII letters, digits, underscores (``_``), hyphens "
"(``-``), and/or periods (``.``), and"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:170
msgid "Start & end with an ASCII letter or digit."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:172
msgid ""
"Comparison of project names is case insensitive and treats arbitrarily-"
"long runs of underscores, hyphens, and/or periods as equal.  For example,"
" if you register a project named ``cool-stuff``, users will be able to "
"download it or declare a dependency on it using any of the following "
"spellings::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:184
msgid "version"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:190
msgid ""
"This is the current version of your project, allowing your users to "
"determine whether or not they have the latest version, and to indicate "
"which specific versions they've tested their own software against."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:194
msgid ""
"Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for "
"each release if you publish your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:197
msgid ""
"See :ref:`Choosing a versioning scheme` for more information on ways to "
"use versions to convey compatibility information to your users."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:200
msgid ""
"If the project code itself needs run-time access to the version, the "
"simplest way is to keep the version in both :file:`setup.py` and your "
"code. If you'd rather not duplicate the value, there are a few ways to "
"manage this. See the \":ref:`Single sourcing the version`\" Advanced "
"Topics section."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:208
msgid "description"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:216
msgid "Give a short and long description for your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:218
msgid ""
"These values will be displayed on :term:`PyPI <Python Package Index "
"(PyPI)>` if you publish your project. On ``pypi.org``, the user interface"
" displays ``description`` in the grey banner and ``long_description`` in "
"the section named \"Project Description\"."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:223
msgid ""
"``description`` is also displayed in lists of projects. For example, it's"
" visible in the search results pages such as "
"https://pypi.org/search/?q=jupyter, the front-page lists of trending "
"projects and new releases, and the list of projects you maintain within "
"your account profile (such as https://pypi.org/user/jaraco/)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:229
msgid ""
"A `content type <https://packaging.python.org/specifications/core-"
"metadata/#description-content-type-optional>`_ can be specified with the "
"``long_description_content_type`` argument, which can be one of "
"``text/plain``, ``text/x-rst``, or ``text/markdown``, corresponding to no"
" formatting, `reStructuredText (reST) "
"<http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"
"#reference-names>`_, and the Github-flavored Markdown dialect of "
"`Markdown <https://daringfireball.net/projects/markdown/>`_ respectively."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:239
msgid "url"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:246
msgid "Give a homepage URL for your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:250
msgid "author"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:257
msgid "Provide details about the author."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:261
msgid "license"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:267
msgid ""
"The ``license`` argument doesn't have to indicate the license under which"
" your package is being released, although you may optionally do so if you"
" want.  If you're using a standard, well-known license, then your main "
"indication can and should be via the ``classifiers`` argument. "
"Classifiers exist for all major open-source licenses."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:273
msgid ""
"The \"license\" argument is more typically used to indicate differences "
"from well-known licenses, or to include your own, unique license. As a "
"general rule, it's a good idea to use a standard, well-known license, "
"both to avoid confusion and because some organizations avoid software "
"whose license is unapproved."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:279
msgid ""
"See :ref:`\"Classifier\" <metadata-classifier>` for some examples of "
"values for ``license``."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:284
msgid "classifiers"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:313
msgid ""
"Provide a list of classifiers that categorize your project. For a full "
"listing, see https://pypi.org/classifiers/."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:316
msgid ""
"Although the list of classifiers is often used to declare what Python "
"versions a project supports, this information is only used for searching "
"& browsing projects on PyPI, not for installing projects.  To actually "
"restrict what Python versions a project can be installed on, use the "
":ref:`python_requires` argument."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:324
msgid "keywords"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:330
msgid "List keywords that describe your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:334
msgid "project_urls"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:346
msgid ""
"List additional relevant URLs about your project. This is the place to "
"link to bug trackers, source repositories, or where to support package "
"development. The string of the key is the exact text that will be "
"displayed on PyPI."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:352
msgid "packages"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:358
msgid ""
"Set ``packages`` to a list of all :term:`packages <Import Package>` in "
"your project, including their subpackages, sub-subpackages, etc.  "
"Although the packages can be listed manually, "
"``setuptools.find_packages()`` finds them automatically.  Use the "
"``exclude`` keyword argument to omit packages that are not intended to be"
" released and installed."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:366
msgid "py_modules"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:372
msgid ""
"If your project contains any single-file Python modules that aren't part "
"of a package, set ``py_modules`` to a list of the names of the modules "
"(minus the ``.py`` extension) in order to make :ref:`setuptools` aware of"
" them."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:378
msgid "install_requires"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:384
msgid ""
"\"install_requires\" should be used to specify what dependencies a "
"project minimally needs to run. When the project is installed by "
":ref:`pip`, this is the specification that is used to install its "
"dependencies."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:388
msgid ""
"For more on using \"install_requires\" see :ref:`install_requires vs "
"Requirements files`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:394
msgid "python_requires"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:396
msgid ""
"If your project only runs on certain Python versions, setting the "
"``python_requires`` argument to the appropriate :pep:`440` version "
"specifier string will prevent :ref:`pip` from installing the project on "
"other Python versions.  For example, if your package is for Python 3+ "
"only, write::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:403
msgid ""
"If your package is for Python 3.3 and up but you're not willing to commit"
" to Python 4 support yet, write::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:408
msgid ""
"If your package is for Python 2.6, 2.7, and all versions of Python 3 "
"starting with 3.3, write::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:413
msgid "And so on."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:417
msgid ""
"Support for this feature is relatively recent.  Your project's source "
"distributions and wheels (see :ref:`Packaging Your Project`) must be "
"built using at least version 24.2.0 of :ref:`setuptools` in order for the"
" ``python_requires`` argument to be recognized and the appropriate "
"metadata generated."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:423
msgid ""
"In addition, only versions 9.0.0 and higher of :ref:`pip` recognize the "
"``python_requires`` metadata.  Users with earlier versions of pip will be"
" able to download & install projects on any Python version regardless of "
"the projects' ``python_requires`` values."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:432
msgid "package_data"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:441
msgid ""
"Often, additional files need to be installed into a :term:`package "
"<Import Package>`. These files are often data thatâ€™s closely related to "
"the packageâ€™s implementation, or text files containing documentation that"
" might be of interest to programmers using the package. These files are "
"called \"package data\"."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:446
msgid ""
"The value must be a mapping from package name to a list of relative path "
"names that should be copied into the package. The paths are interpreted "
"as relative to the directory containing the package."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:450
msgid ""
"For more information, see `Including Data Files "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#including-"
"data-files>`_ from the `setuptools docs "
"<https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:458
msgid "data_files"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:464
msgid ""
"Although configuring :ref:`Package Data` is sufficient for most needs, in"
" some cases you may need to place data files *outside* of your "
":term:`packages <Import Package>`.  The ``data_files`` directive allows "
"you to do that. It is mostly useful if you need to install files which "
"are used by other programs, which may be unaware of Python packages."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:470
msgid ""
"Each ``(directory, files)`` pair in the sequence specifies the "
"installation directory and the files to install there. The ``directory`` "
"must be a relative path (although this may change in the future, see "
"`wheel Issue #92 <https://github.com/pypa/wheel/issues/92>`_). and it is "
"interpreted relative to the installation prefix (Pythonâ€™s ``sys.prefix`` "
"for a default installation; ``site.USER_BASE`` for a user installation). "
"Each file name in ``files`` is interpreted relative to the "
":file:`setup.py` script at the top of the project source distribution."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:480
msgid ""
"For more information see the distutils section on `Installing Additional "
"Files <http://docs.python.org/3/distutils/setupscript.html#installing-"
"additional-files>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:485
msgid ""
"When installing packages as egg, ``data_files`` is not supported. So, if "
"your project uses :ref:`setuptools`, you must use ``pip`` to install it. "
"Alternatively, if you must use ``python setup.py``, then you need to pass"
" the ``--old-and-unmanageable`` option."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:492
msgid "scripts"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:494
msgid ""
"Although ``setup()`` supports a `scripts "
"<http://docs.python.org/3/distutils/setupscript.html#installing-"
"scripts>`_ keyword for pointing to pre-made scripts to install, the "
"recommended approach to achieve cross-platform compatibility is to use "
":ref:`console_scripts` entry points (see below)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:501
msgid "entry_points"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:510
msgid ""
"Use this keyword to specify any plugins that your project provides for "
"any named entry points that may be defined by your project or others that"
" you depend on."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:513
msgid ""
"For more information, see the section on `Dynamic Discovery of Services "
"and Plugins <https://setuptools.readthedocs.io/en/latest/setuptools.html"
"#dynamic-discovery-of-services-and-plugins>`_ from the :ref:`setuptools` "
"docs."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:518
msgid "The most commonly used entry point is \"console_scripts\" (see below)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:523
msgid "console_scripts"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:533
msgid ""
"Use \"console_script\" `entry points "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-"
"discovery-of-services-and-plugins>`_ to register your script interfaces. "
"You can then let the toolchain handle the work of turning these "
"interfaces into actual scripts [2]_.  The scripts will be generated "
"during the install of your :term:`distribution <Distribution Package>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:540
msgid ""
"For more information, see `Automatic Script Creation "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-"
"script-creation>`_ from the `setuptools docs "
"<https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:547
msgid "Choosing a versioning scheme"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:550
msgid "Standards compliance for interoperability"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:552
msgid ""
"Different Python projects may use different versioning schemes based on "
"the needs of that particular project, but all of them are required to "
"comply with the flexible :pep:`public version scheme <440#public-version-"
"identifiers>` specified in :pep:`440` in order to be supported in tools "
"and libraries like ``pip`` and ``setuptools``."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:558
msgid "Here are some examples of compliant version numbers::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:569
msgid ""
"To further accommodate historical variations in approaches to version "
"numbering, :pep:`440` also defines a comprehensive technique for "
":pep:`version normalisation <440#normalization>` that maps variant "
"spellings of different version numbers to a standardised canonical form."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:575
msgid "Scheme choices"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:578
msgid "Semantic versioning (preferred)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:580
msgid ""
"For new projects, the recommended versioning scheme is based on `Semantic"
" Versioning <http://semver.org>`_, but adopts a different approach to "
"handling pre-releases and build metadata."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:584
msgid ""
"The essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE "
"numbering scheme, where the project author increments:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:587
msgid "MAJOR version when they make incompatible API changes,"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:588
msgid ""
"MINOR version when they add functionality in a backwards-compatible "
"manner, and"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:589
msgid "MAINTENANCE version when they make backwards-compatible bug fixes."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:591
msgid ""
"Adopting this approach as a project author allows users to make use of "
":pep:`\"compatible release\" <440#compatible-release>` specifiers, where "
"``name ~= X.Y`` requires at least release X.Y, but also allows any later "
"release with a matching MAJOR version."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:596
msgid ""
"Python projects adopting semantic versioning should abide by clauses 1-8 "
"of the `Semantic Versioning 2.0.0 specification <http://semver.org>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:600
msgid "Date based versioning"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:602
msgid ""
"Semantic versioning is not a suitable choice for all projects, such as "
"those with a regular time based release cadence and a deprecation process"
" that provides warnings for a number of releases prior to removal of a "
"feature."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:606
msgid ""
"A key advantage of date based versioning is that it is straightforward to"
" tell how old the base feature set of a particular release is given just "
"the version number."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:609
msgid ""
"Version numbers for date based projects typically take the form of "
"YEAR.MONTH (for example, ``12.04``, ``15.10``)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:613
msgid "Serial versioning"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:615
msgid ""
"This is the simplest possible versioning scheme, and consists of a single"
" number which is incremented every release."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:618
msgid ""
"While serial versioning is very easy to manage as a developer, it is the "
"hardest to track as an end user, as serial version numbers convey little "
"or no information regarding API backwards compatibility."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:623
msgid "Hybrid schemes"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:625
msgid ""
"Combinations of the above schemes are possible. For example, a project "
"may combine date based versioning with serial versioning to create a "
"YEAR.SERIAL numbering scheme that readily conveys the approximate age of "
"a release, but doesn't otherwise commit to a particular release cadence "
"within the year."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:631
msgid "Pre-release versioning"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:633
msgid ""
"Regardless of the base versioning scheme, pre-releases for a given final "
"release may be published as:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:636
msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:637
msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:638
msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:639
msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:641
msgid ""
"``pip`` and other modern Python package installers ignore pre-releases by"
" default when deciding which versions of dependencies to install."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:646
msgid "Local version identifiers"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:648
msgid ""
"Public version identifiers are designed to support distribution via "
":term:`PyPI <Python Package Index (PyPI)>`. Python's software "
"distribution tools also support the notion of a :pep:`local version "
"identifier <440#local-version-identifiers>`, which can be used to "
"identify local development builds not intended for publication, or "
"modified variants of a release maintained by a redistributor."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:655
msgid ""
"A local version identifier takes the form ``<public version "
"identifier>+<local version label>``. For example::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:663
msgid "Working in \"development mode\""
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:665
msgid ""
"Although not required, it's common to locally install your project in "
"\"editable\" or \"develop\" mode while you're working on it.  This allows"
" your project to be both installed and editable in project form."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:669
msgid "Assuming you're in the root of your project directory, then run:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:676
msgid ""
"Although somewhat cryptic, ``-e`` is short for ``--editable``, and ``.`` "
"refers to the current working directory, so together, it means to install"
" the current directory (i.e. your project) in editable mode.  This will "
"also install any dependencies declared with \"install_requires\" and any "
"scripts declared with \"console_scripts\".  Dependencies will be "
"installed in the usual, non-editable mode."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:682
msgid ""
"It's fairly common to also want to install some of your dependencies in "
"editable mode as well. For example, supposing your project requires "
"\"foo\" and \"bar\", but you want \"bar\" installed from VCS in editable "
"mode, then you could construct a requirements file like so::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:690
msgid ""
"The first line says to install your project and any dependencies. The "
"second line overrides the \"bar\" dependency, such that it's fulfilled "
"from VCS, not PyPI."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:694
msgid ""
"If, however, you want \"bar\" installed from a local directory in "
"editable mode, the requirements file should look like this, with the "
"local paths at the top of the file::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:699
msgid ""
"Otherwise, the dependency will be fulfilled from PyPI, due to the "
"installation order of the requirements file.  For more on requirements "
"files, see the :ref:`Requirements File <pip:Requirements Files>` section "
"in the pip docs.  For more on VCS installs, see the :ref:`VCS Support "
"<pip:VCS Support>` section of the pip docs."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:703
msgid ""
"Lastly, if you don't want to install any dependencies at all, you can "
"run::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:708
msgid ""
"For more information, see the `Development Mode "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#development-"
"mode>`_ section of the `setuptools docs "
"<https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:715
msgid "Packaging your project"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:717
msgid ""
"To have your project installable from a :term:`Package Index` like "
":term:`PyPI <Python Package Index (PyPI)>`, you'll need to create a "
":term:`Distribution <Distribution Package>` (aka \":term:`Package "
"<Distribution Package>`\") for your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:725
msgid "Source distributions"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:727
msgid ""
"Minimally, you should create a :term:`Source Distribution <Source "
"Distribution (or \"sdist\")>`:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:735
msgid ""
"A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built "
"Distribution`), and requires a build step when installed by pip.  Even if"
" the distribution is pure Python (i.e. contains no extensions), it still "
"involves a build step to build out the installation metadata from "
":file:`setup.py`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:742
msgid "Wheels"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:744
msgid ""
"You should also create a wheel for your project. A wheel is a "
":term:`built package <Built Distribution>` that can be installed without "
"needing to go through the \"build\" process. Installing wheels is "
"substantially faster for the end user than installing from a source "
"distribution."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:749
msgid ""
"If your project is pure Python (i.e. contains no compiled extensions) and"
" natively supports both Python 2 and 3, then you'll be creating what's "
"called a :ref:`*Universal Wheel* (see section below) <Universal Wheels>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:753
msgid ""
"If your project is pure Python but does not natively support both Python "
"2 and 3, then you'll be creating a :ref:`\"Pure Python Wheel\" (see "
"section below) <Pure Python Wheels>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:757
msgid ""
"If your project contains compiled extensions, then you'll be creating "
"what's called a :ref:`*Platform Wheel* (see section below) <Platform "
"Wheels>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:760
msgid ""
"Before you can build wheels for your project, you'll need to install the "
"``wheel`` package:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:771
msgid "Universal Wheels"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:773
msgid ""
"*Universal Wheels* are wheels that are pure Python (i.e. contain no "
"compiled extensions) and support Python 2 and 3. This is a wheel that can"
" be installed anywhere by :ref:`pip`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:777
#: ../../guides/distributing-packages-using-setuptools.rst:815
#: ../../guides/distributing-packages-using-setuptools.rst:842
msgid "To build the wheel:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:783
msgid ""
"You can also permanently set the ``--universal`` flag in "
":file:`setup.cfg` (e.g., see `sampleproject/setup.cfg "
"<https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_):"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:792
msgid "Only use the ``--universal`` setting, if:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:794
msgid ""
"Your project runs on Python 2 and 3 with no changes (i.e. it does not "
"require 2to3)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:796
msgid "Your project does not have any C extensions."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:798
msgid ""
"Beware that ``bdist_wheel`` does not currently have any checks to warn if"
" you use the setting inappropriately."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:801
msgid ""
"If your project has optional C extensions, it is recommended not to "
"publish a universal wheel, because pip will prefer the wheel over a "
"source installation, and prevent the possibility of building the "
"extension."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:809
msgid "Pure Python Wheels"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:811
msgid ""
"*Pure Python Wheels* that are not \"universal\" are wheels that are pure "
"Python (i.e. contain no compiled extensions), but don't natively support "
"both Python 2 and 3."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:822
msgid ""
"`bdist_wheel` will detect that the code is pure Python, and build a wheel"
" that's named such that it's usable on any Python installation with the "
"same major version (Python 2 or Python 3) as the version you used to "
"build the wheel.  For details on the naming of wheel files, see "
":pep:`425`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:827
msgid ""
"If your code supports both Python 2 and 3, but with different code (e.g.,"
" you use `\"2to3\" <https://docs.python.org/2/library/2to3.html>`_) you "
"can run ``setup.py bdist_wheel`` twice, once with Python 2 and once with "
"Python 3. This will produce wheels for each version."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:837
msgid "Platform Wheels"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:839
msgid ""
"*Platform Wheels* are wheels that are specific to a certain platform like"
" Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:849
msgid ""
"`bdist_wheel` will detect that the code is not pure Python, and build a "
"wheel that's named such that it's only usable on the platform that it was"
" built on. For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:855
msgid ""
":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of "
"platform wheels for Windows, macOS, and the multi-distro ``manylinux1`` "
"ABI. Details of the latter are defined in :pep:`513`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:863
msgid "Uploading your Project to PyPI"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:865
msgid ""
"When you ran the command to create your distribution, a new directory "
"``dist/`` was created under your project's root directory. That's where "
"you'll find your distribution file(s) to upload."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:869
msgid ""
"These files are only created when you run the command to create your "
"distribution. This means that any time you change the source of your "
"project or the configuration in your :file:`setup.py` file, you will need"
" to rebuild these files again before you can distribute the changes to "
"PyPI."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:874
msgid ""
"Before releasing on main PyPI repo, you might prefer training with the "
"`PyPI test site <https://test.pypi.org/>`_ which is cleaned on a semi "
"regular basis. See :ref:`using-test-pypi` on how to setup your "
"configuration in order to use it."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:879
msgid ""
"In other resources you may encounter references to using ``python "
"setup.py register`` and ``python setup.py upload``. These methods of "
"registering and uploading a package are **strongly discouraged** as it "
"may use a plaintext HTTP or unverified HTTPS connection on some Python "
"versions, allowing your username and password to be intercepted during "
"transmission."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:885
msgid ""
"The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, "
"to ensure safety of all users, certain kinds of URLs and directives are "
"forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** "
"trying to upload your distribution, you should check to see if your brief"
" / long descriptions provided in :file:`setup.py` are valid.  You can do "
"this by following the instructions for the `pypa/readme_renderer "
"<https://github.com/pypa/readme_renderer>`_ tool."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:894
msgid "Create an account"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:896
msgid ""
"First, you need a :term:`PyPI <Python Package Index (PyPI)>` user "
"account. You can create an account `using the form on the PyPI website "
"<https://pypi.org/account/register/>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:900
msgid ""
"If you want to avoid entering your username and password when uploading, "
"you can create a ``$HOME/.pypirc`` file with your username and password:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:910
msgid "**Be aware that this stores your password in plaintext.**"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:915
msgid "Upload your distributions"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:917
msgid ""
"Once you have an account you can upload your distributions to :term:`PyPI"
" <Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:920
msgid ""
"The process for uploading a release is the same regardless of whether or "
"not the project already exists on PyPI - if it doesn't exist yet, it will"
" be automatically created when the first release is uploaded."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:924
msgid ""
"For the second and subsequent releases, PyPI only requires that the "
"version number of the new release differ from any previous releases."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:931
msgid ""
"You can see if your package has successfully uploaded by navigating to "
"the URL ``https://pypi.org/project/<sampleproject>`` where "
"``sampleproject`` is the name of your project that you uploaded. It may "
"take a minute or two for your project to appear on the site."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:938
msgid ""
"Depending on your platform, this may require root or Administrator "
"access. :ref:`pip` is currently considering changing this by `making user"
" installs the default behavior "
"<https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:944
msgid ""
"Specifically, the \"console_script\" approach generates ``.exe`` files on"
" Windows, which are necessary because the OS special-cases ``.exe`` "
"files. Script-execution features like ``PATHEXT`` and the :pep:`Python "
"Launcher for Windows <397>` allow scripts to be used in many cases, but "
"not all."
msgstr ""

#~ msgid ""
#~ "A :file:`MANIFEST.in` is needed when you"
#~ " need to package additional files "
#~ "that are not automatically included in"
#~ " a source distribution. To see a "
#~ "list of what's included by default, "
#~ "see the `Specifying the files to "
#~ "distribute <https://docs.python.org/3/distutils/sourcedist.html"
#~ "#specifying-the-files-to-distribute>`_ "
#~ "section from the :ref:`distutils` "
#~ "documentation."
#~ msgstr ""

#~ msgid ""
#~ "For details on writing a "
#~ ":file:`MANIFEST.in` file, see the `The "
#~ "MANIFEST.in template "
#~ "<https://docs.python.org/2/distutils/sourcedist.html#the-"
#~ "manifest-in-template>`_ section from the"
#~ " :ref:`distutils` documentation."
#~ msgstr ""

