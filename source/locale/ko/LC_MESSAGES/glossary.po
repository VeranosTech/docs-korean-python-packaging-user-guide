# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2017, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 14:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/glossary.rst:3
msgid "Glossary"
msgstr ""

#: ../../source/glossary.rst:8
msgid "Binary Distribution"
msgstr ""

#: ../../source/glossary.rst:11
msgid ""
"A specific kind of :term:`Built Distribution` that contains compiled "
"extensions."
msgstr ""

#: ../../source/glossary.rst:14
msgid "Built Distribution"
msgstr ""

#: ../../source/glossary.rst:17
msgid ""
"A :term:`Distribution <Distribution Package>` format containing files and"
" metadata that only need to be moved to the correct location on the "
"target system, to be installed. :term:`Wheel` is such a format, whereas "
"distutil's :term:`Source Distribution <Source Distribution (or "
"\"sdist\")>` is not, in that it requires a build step before it can be "
"installed.  This format does not imply that Python files have to be "
"precompiled (:term:`Wheel` intentionally does not include compiled Python"
" files)."
msgstr ""

#: ../../source/glossary.rst:26
msgid "Distribution Package"
msgstr ""

#: ../../source/glossary.rst:29
msgid ""
"A versioned archive file that contains Python :term:`packages <Import "
"Package>`, :term:`modules <module>`, and other resource files that are "
"used to distribute a :term:`Release`. The archive file is what an end-"
"user will download from the internet and install."
msgstr ""

#: ../../source/glossary.rst:34
msgid ""
"A distribution package is more commonly referred to with the single words"
" \"package\" or \"distribution\", but this guide may use the expanded "
"term when more clarity is needed to prevent confusion with an "
":term:`Import Package` (which is also commonly called a \"package\") or "
"another kind of distribution (e.g. a Linux distribution or the Python "
"language distribution), which are often referred to with the single term "
"\"distribution\"."
msgstr ""

#: ../../source/glossary.rst:41
msgid "Egg"
msgstr ""

#: ../../source/glossary.rst:44
msgid ""
"A :term:`Built Distribution` format introduced by :ref:`setuptools`, "
"which is being replaced by :term:`Wheel`.  For details, see `The Internal"
" Structure of Python Eggs "
"<https://setuptools.readthedocs.io/en/latest/formats.html>`_ and `Python "
"Eggs <http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
msgstr ""

#: ../../source/glossary.rst:49
msgid "Extension Module"
msgstr ""

#: ../../source/glossary.rst:52
msgid ""
"A :term:`module` written in the low-level language of the Python "
"implementation: C/C++ for Python, Java for Jython. Typically contained in"
" a single dynamically loadable pre-compiled file, e.g.  a shared object "
"(.so) file for Python extensions on Unix, a DLL (given the .pyd "
"extension) for Python extensions on Windows, or a Java class file for "
"Jython extensions."
msgstr ""

#: ../../source/glossary.rst:59
msgid "Known Good Set (KGS)"
msgstr ""

#: ../../source/glossary.rst:62
msgid ""
"A set of distributions at specified versions which are compatible with "
"each other. Typically a test suite will be run which passes all tests "
"before a specific set of packages is declared a known good set. This term"
" is commonly used by frameworks and toolkits which are comprised of "
"multiple individual distributions."
msgstr ""

#: ../../source/glossary.rst:68
msgid "Import Package"
msgstr ""

#: ../../source/glossary.rst:71
msgid ""
"A Python module which can contain other modules or recursively, other "
"packages."
msgstr ""

#: ../../source/glossary.rst:74
msgid ""
"An import package is more commonly referred to with the single word "
"\"package\", but this guide will use the expanded term when more clarity "
"is needed to prevent confusion with a :term:`Distribution Package` which "
"is also commonly called a \"package\"."
msgstr ""

#: ../../source/glossary.rst:78
msgid "Module"
msgstr ""

#: ../../source/glossary.rst:81
msgid ""
"The basic unit of code reusability in Python, existing in one of two "
"types: :term:`Pure Module`, or :term:`Extension Module`."
msgstr ""

#: ../../source/glossary.rst:84
msgid "Package Index"
msgstr ""

#: ../../source/glossary.rst:87
msgid ""
"A repository of distributions with a web interface to automate "
":term:`package <Distribution Package>` discovery and consumption."
msgstr ""

#: ../../source/glossary.rst:90
msgid "Per Project Index"
msgstr ""

#: ../../source/glossary.rst:93
msgid ""
"A private or other non-canonical :term:`Package Index` indicated by a "
"specific :term:`Project` as the index preferred or required to resolve "
"dependencies of that project."
msgstr ""

#: ../../source/glossary.rst:97
msgid "Project"
msgstr ""

#: ../../source/glossary.rst:100
msgid ""
"A library, framework, script, plugin, application, or collection of data "
"or other resources, or some combination thereof that is intended to be "
"packaged into a :term:`Distribution <Distribution Package>`."
msgstr ""

#: ../../source/glossary.rst:104
msgid ""
"Since most projects create :term:`Distributions <Distribution Package>` "
"using :ref:`distutils` or :ref:`setuptools`, another practical way to "
"define projects currently is something that contains a :term:`setup.py` "
"at the root of the project src directory, where \"setup.py\" is the "
"project specification filename used by :ref:`distutils` and "
":ref:`setuptools`."
msgstr ""

#: ../../source/glossary.rst:111
msgid ""
"Python projects must have unique names, which are registered on "
":term:`PyPI <Python Package Index (PyPI)>`. Each project will then "
"contain one or more :term:`Releases <Release>`, and each release may "
"comprise one or more :term:`distributions <Distribution Package>`."
msgstr ""

#: ../../source/glossary.rst:116
msgid ""
"Note that there is a strong convention to name a project after the name "
"of the package that is imported to run that project. However, this "
"doesn't have to hold true. It's possible to install a distribution from "
"the project 'foo' and have it provide a package importable only as 'bar'."
msgstr ""

#: ../../source/glossary.rst:122
msgid "Pure Module"
msgstr ""

#: ../../source/glossary.rst:125
msgid ""
"A :term:`module` written in Python and contained in a single .py file "
"(and possibly associated .pyc and/or .pyo files)."
msgstr ""

#: ../../source/glossary.rst:128
msgid "Python Packaging Authority (PyPA)"
msgstr ""

#: ../../source/glossary.rst:131
msgid ""
"PyPA is a working group that maintains many of the relevant projects in "
"Python packaging. They maintain a site at https://www.pypa.io, host "
"projects on `github <https://github.com/pypa>`_ and `bitbucket "
"<https://bitbucket.org/pypa>`_, and discuss issues on the `pypa-dev "
"mailing list <https://groups.google.com/forum/#!forum/pypa-dev>`_."
msgstr ""

#: ../../source/glossary.rst:137
msgid "Python Package Index (PyPI)"
msgstr ""

#: ../../source/glossary.rst:140
msgid ""
"`PyPI <https://pypi.org>`_ is the default :term:`Package Index` for the "
"Python community. It is open to all Python developers to consume and "
"distribute their distributions."
msgstr ""

#: ../../source/glossary.rst:143
msgid "pypi.org"
msgstr ""

#: ../../source/glossary.rst:146
msgid ""
"`pypi.org <https://pypi.org>`_ is the domain name for the :term:`Python "
"Package Index (PyPI)`. It replaced the legacy index domain name, "
"`pypi.python.org`, in 2017. It is powered by :ref:`warehouse`."
msgstr ""

#: ../../source/glossary.rst:150
msgid "Release"
msgstr ""

#: ../../source/glossary.rst:153
msgid ""
"A snapshot of a :term:`Project` at a particular point in time, denoted by"
" a version identifier."
msgstr ""

#: ../../source/glossary.rst:156
msgid ""
"Making a release may entail the publishing of multiple "
":term:`Distributions <Distribution Package>`.  For example, if version "
"1.0 of a project was released, it could be available in both a source "
"distribution format and a Windows installer distribution format."
msgstr ""

#: ../../source/glossary.rst:161
msgid "Requirement"
msgstr ""

#: ../../source/glossary.rst:164
msgid ""
"A specification for a :term:`package <Distribution Package>` to be "
"installed.  :ref:`pip`, the :term:`PYPA <Python Packaging Authority "
"(PyPA)>` recommended installer, allows various forms of specification "
"that can all be considered a \"requirement\". For more information, see "
"the :ref:`pip:pip install` reference."
msgstr ""

#: ../../source/glossary.rst:170
msgid "Requirement Specifier"
msgstr ""

#: ../../source/glossary.rst:173
msgid ""
"A format used by :ref:`pip` to install packages from a :term:`Package "
"Index`. For an EBNF diagram of the format, see the "
"`pkg_resources.Requirement "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html"
"#requirement-objects>`_ entry in the :ref:`setuptools` docs. For example,"
" \"foo>=1.3\" is a requirement specifier, where \"foo\" is the project "
"name, and the \">=1.3\" portion is the :term:`Version Specifier`"
msgstr ""

#: ../../source/glossary.rst:180
msgid "Requirements File"
msgstr ""

#: ../../source/glossary.rst:183
msgid ""
"A file containing a list of :term:`Requirements <Requirement>` that can "
"be installed using :ref:`pip`. For more information, see the :ref:`pip` "
"docs on :ref:`pip:Requirements Files`."
msgstr ""

#: ../../source/glossary.rst:187
msgid "setup.py"
msgstr ""

#: ../../source/glossary.rst:190
msgid "The project specification file for :ref:`distutils` and :ref:`setuptools`."
msgstr ""

#: ../../source/glossary.rst:192
msgid "Source Archive"
msgstr ""

#: ../../source/glossary.rst:195
msgid ""
"An archive containing the raw source code for a :term:`Release`, prior to"
" creation of an :term:`Source Distribution <Source Distribution (or "
"\"sdist\")>` or :term:`Built Distribution`."
msgstr ""

#: ../../source/glossary.rst:199
msgid "Source Distribution (or \"sdist\")"
msgstr ""

#: ../../source/glossary.rst:202
msgid ""
"A :term:`distribution <Distribution Package>` format (usually generated "
"using ``python setup.py sdist``) that provides metadata and the essential"
" source files needed for installing by a tool like :ref:`pip`, or for "
"generating a :term:`Built Distribution`."
msgstr ""

#: ../../source/glossary.rst:207
msgid "System Package"
msgstr ""

#: ../../source/glossary.rst:210
msgid ""
"A package provided in a format native to the operating system, e.g. an "
"rpm or dpkg file."
msgstr ""

#: ../../source/glossary.rst:213
msgid "Version Specifier"
msgstr ""

#: ../../source/glossary.rst:216
msgid ""
"The version component of a :term:`Requirement Specifier`. For example, "
"the \">=1.3\" portion of \"foo>=1.3\".  :pep:`440` contains a :pep:`full "
"specification <440#version-specifiers>` of the specifiers that Python "
"packaging currently supports.  Support for PEP440 was implemented in "
":ref:`setuptools` v8.0 and :ref:`pip` v6.0."
msgstr ""

#: ../../source/glossary.rst:222
msgid "Virtual Environment"
msgstr ""

#: ../../source/glossary.rst:225
msgid ""
"An isolated Python environment that allows packages to be installed for "
"use by a particular application, rather than being installed system wide."
" For more information, see the section on :ref:`Creating and using "
"Virtual Environments`."
msgstr ""

#: ../../source/glossary.rst:229
msgid "Wheel"
msgstr ""

#: ../../source/glossary.rst:232
msgid ""
"A :term:`Built Distribution` format introduced by :pep:`427`, which is "
"intended to replace the :term:`Egg` format.  Wheel is currently supported"
" by :ref:`pip`."
msgstr ""

#: ../../source/glossary.rst:235
msgid "Working Set"
msgstr ""

#: ../../source/glossary.rst:238
msgid ""
"A collection of :term:`distributions <Distribution Package>` available "
"for importing. These are the distributions that are on the `sys.path` "
"variable. At most, one :term:`Distribution <Distribution Package>` for a "
"project is possible in a working set."
msgstr ""

