# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2017, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-12 11:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorials/packaging-projects.rst:2
msgid "Packaging Python Projects"
msgstr ""

#: ../../tutorials/packaging-projects.rst:4
msgid ""
"This tutorial walks you through how to package a simple Python project. "
"It will show you how to add the necessary files and structure to create "
"the package, how to build the package, and how to upload it to the Python"
" Package Index."
msgstr ""

#: ../../tutorials/packaging-projects.rst:10
msgid "A simple project"
msgstr ""

#: ../../tutorials/packaging-projects.rst:12
msgid ""
"This tutorial uses a simple project named ``example_pkg``. If you are "
"unfamiliar with Python's modules and :term:`import packages <import "
"package>`, take a few minutes to read over the `Python documentation for "
"packages and modules`_. Even if you already have a project that you want "
"to package up, we recommend following this tutorial as-is using this "
"example package and then trying with your own package."
msgstr ""

#: ../../tutorials/packaging-projects.rst:16
msgid "To create this project locally, create the following file structure:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:25
msgid ""
"Once you create this structure, you'll want to run all of the commands in"
" this tutorial within the top-level folder - so be sure to ``cd "
"packaging_tutorial``."
msgstr ""

#: ../../tutorials/packaging-projects.rst:28
msgid ""
"You should also edit :file:`example_pkg/__init__.py` and put the "
"following code in there:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:35
msgid ""
"This is just so that you can verify that it installed correctly later in "
"this tutorial and is not used by PyPI."
msgstr ""

#: ../../tutorials/packaging-projects.rst:43
msgid "Creating the package files"
msgstr ""

#: ../../tutorials/packaging-projects.rst:45
msgid ""
"You will now create a handful of files to package up this project and "
"prepare it for distribution. Create the new files listed below - you will"
" add content to them in the following steps."
msgstr ""

#: ../../tutorials/packaging-projects.rst:60
msgid "Creating setup.py"
msgstr ""

#: ../../tutorials/packaging-projects.rst:62
msgid ""
":file:`setup.py` is the build script for :ref:`setuptools`. It tells "
"setuptools about your package (such as the name and version) as well as "
"which code files to include."
msgstr ""

#: ../../tutorials/packaging-projects.rst:66
msgid ""
"Open :file:`setup.py` and enter the following content. Update the package"
" name to include your username (for example, ``example-pkg-theacodes``), "
"this ensures that you have a unique package name and that your package "
"doesn't conflict with packages uploaded by other people following this "
"tutorial."
msgstr ""

#: ../../tutorials/packaging-projects.rst:94
msgid ""
":func:`setup` takes several arguments. This example package uses a "
"relatively minimal set:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:97
msgid ""
"``name`` is the *distribution name* of your package. This can be any name"
" as long as only contains letters, numbers, ``_`` , and ``-``. It also "
"must not already taken on pypi.org. **Be sure to update this with your "
"username,** as this ensures you won't try to upload a package with the "
"same name as one which already exists when you upload the package."
msgstr ""

#: ../../tutorials/packaging-projects.rst:100
msgid ""
"``version`` is the package version see :pep:`440` for more details on "
"versions."
msgstr ""

#: ../../tutorials/packaging-projects.rst:102
msgid ""
"``author`` and ``author_email`` are used to identify the author of the "
"package."
msgstr ""

#: ../../tutorials/packaging-projects.rst:104
msgid "``description`` is a short, one-sentence summary of the package."
msgstr ""

#: ../../tutorials/packaging-projects.rst:105
msgid ""
"``long_description`` is a detailed description of the package. This is "
"shown on the package detail package on the Python Package Index. In this "
"case, the long description is loaded from :file:`README.md` which is a "
"common pattern."
msgstr ""

#: ../../tutorials/packaging-projects.rst:109
msgid ""
"``long_description_content_type`` tells the index what type of markup is "
"used for the long description. In this case, it's Markdown."
msgstr ""

#: ../../tutorials/packaging-projects.rst:111
msgid ""
"``url`` is the URL for the homepage of the project. For many projects, "
"this will just be a link to GitHub, GitLab, Bitbucket, or similar code "
"hosting service."
msgstr ""

#: ../../tutorials/packaging-projects.rst:114
msgid ""
"``packages`` is a list of all Python :term:`import packages <Import "
"Package>` that should be included in the :term:`distribution package`. "
"Instead of listing each package manually, we can use "
":func:`find_packages` to automatically discover all packages and "
"subpackages. In this case, the list of packages will be `example_pkg` as "
"that's the only package present."
msgstr ""

#: ../../tutorials/packaging-projects.rst:119
msgid ""
"``classifiers`` gives the index and :ref:`pip` some additional metadata "
"about your package. In this case, the package is only compatible with "
"Python 3, is licensed under the MIT license, and is OS-independent. You "
"should always include at least which version(s) of Python your package "
"works on, which license your package is available under, and which "
"operating systems your package will work on. For a complete list of "
"classifiers, see https://pypi.org/classifiers/."
msgstr ""

#: ../../tutorials/packaging-projects.rst:127
msgid ""
"There are many more than the ones mentioned here. See :doc:`/guides"
"/distributing-packages-using-setuptools` for more details."
msgstr ""

#: ../../tutorials/packaging-projects.rst:132
msgid "Creating README.md"
msgstr ""

#: ../../tutorials/packaging-projects.rst:134
msgid ""
"Open :file:`README.md` and enter the following content. You can customize"
" this if you'd like."
msgstr ""

#: ../../tutorials/packaging-projects.rst:147
msgid "Creating a LICENSE"
msgstr ""

#: ../../tutorials/packaging-projects.rst:149
msgid ""
"It's important for every package uploaded to the Python Package Index to "
"include a license. This tells users who install your package the terms "
"under which they can use your package. For help picking a license, see "
"https://choosealicense.com/. Once you have chosen a license, open "
":file:`LICENSE` and enter the license text. For example, if you had "
"chosen the MIT license:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:182
msgid "Generating distribution archives"
msgstr ""

#: ../../tutorials/packaging-projects.rst:184
msgid ""
"The next step is to generate :term:`distribution packages <distribution "
"package>` for the package. These are archives that are uploaded to the "
"Package Index and can be installed by :ref:`pip`."
msgstr ""

#: ../../tutorials/packaging-projects.rst:188
msgid ""
"Make sure you have the latest versions of ``setuptools`` and ``wheel`` "
"installed:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:195
msgid ""
"IF you have trouble installing these, see the :doc:`installing-packages` "
"tutorial."
msgstr ""

#: ../../tutorials/packaging-projects.rst:198
msgid ""
"Now run this command from the same directory where :file:`setup.py` is "
"located:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:204
msgid ""
"This command should output a lot of text and once completed should "
"generate two files in the :file:`dist` directory:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:213
msgid ""
"If you run into trouble here, please copy the output and file an issue "
"over on `packaging problems`_ and we'll do our best to help you!"
msgstr ""

#: ../../tutorials/packaging-projects.rst:220
msgid ""
"The ``tar.gz`` file is a :term:`source archive` whereas the ``.whl`` file"
" is a :term:`built distribution`. Newer :ref:`pip` versions "
"preferentially install built distributions, but will fall back to source "
"archives if needed. You should always upload a source archive and provide"
" built archives for the platforms your project is compatible with. In "
"this case, our example package is compatible with Python on any platform "
"so only one built distribution is needed."
msgstr ""

#: ../../tutorials/packaging-projects.rst:228
msgid "Uploading the distribution archives"
msgstr ""

#: ../../tutorials/packaging-projects.rst:230
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr ""

#: ../../tutorials/packaging-projects.rst:232
msgid ""
"The first thing you'll need to do is register an account on `Test PyPI`. "
"Test PyPI is a separate instance of the package index intended for "
"testing and experimentation. It's great for things like this tutorial "
"where we don't necessarily want to upload to the real index. To register "
"an account, go to https://test.pypi.org/account/register/ and complete "
"the steps on that page. You will also need to verify your email address "
"before you're able to upload any packages.  For more details on Test "
"PyPI, see :doc:`/guides/using-testpypi`."
msgstr ""

#: ../../tutorials/packaging-projects.rst:241
msgid ""
"Now that you are registered, you can use :ref:`twine` to upload the "
"distribution packages. You'll need to install Twine:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:248
msgid ""
"Once installed, run Twine to upload all of the archives under "
":file:`dist`:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:254
msgid ""
"You will be prompted for the username and password you registered with "
"Test PyPI. After the command completes, you should see output similar to "
"this:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:268
msgid ""
"Once uploaded your package should be viewable on TestPyPI, for example, "
"https://test.pypi.org/project/example-pkg-your-username"
msgstr ""

#: ../../tutorials/packaging-projects.rst:273
msgid "Installing your newly uploaded package"
msgstr ""

#: ../../tutorials/packaging-projects.rst:275
msgid ""
"You can use :ref:`pip` to install your package and verify that it works. "
"Create a new :ref:`virtualenv` (see :doc:`/tutorials/installing-packages`"
" for detailed instructions) and install your package from TestPyPI:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:283
msgid "Make sure to specify your username in the package name!"
msgstr ""

#: ../../tutorials/packaging-projects.rst:285
msgid ""
"pip should install the package from Test PyPI and the output should look "
"something like this:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:295
msgid ""
"This example uses ``--index-url`` flag to specify TestPyPI instead of "
"live PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI "
"doesn't have the same packages as the live PyPI, it's possible that "
"attempting to install dependencies may fail or install something "
"unexpected. While our example package doesn't have any dependencies, it's"
" a good practice to avoid installing dependencies when using TestPyPI."
msgstr ""

#: ../../tutorials/packaging-projects.rst:297
msgid ""
"You can test that it was installed correctly by importing the module and "
"referencing the ``name`` property you put in :file:`__init__.py` earlier."
msgstr ""

#: ../../tutorials/packaging-projects.rst:300
msgid "Run the Python interpreter (make sure you're still in your virtualenv):"
msgstr ""

#: ../../tutorials/packaging-projects.rst:306
msgid ""
"And then import the module and print out the ``name`` property. This "
"should be the same regardless of what you name you gave your "
":term:`distribution package` in :file:`setup.py` (in this case, "
"``example-pkg-your-username``) because your :term:`import package` is "
"``example_pkg``."
msgstr ""

#: ../../tutorials/packaging-projects.rst:318
msgid "Next steps"
msgstr ""

#: ../../tutorials/packaging-projects.rst:320
msgid ""
"**Congratulations, you've packaged and distributed a Python project!** ✨ "
"🍰 ✨"
msgstr ""

#: ../../tutorials/packaging-projects.rst:323
msgid ""
"Keep in mind that this tutorial showed you how to upload your package to "
"Test PyPI, which isn't a permanent storage. The Test system occasionally "
"deletes packages and accounts. It is best to use Test PyPI for testing "
"and experiments like this tutorial."
msgstr ""

#: ../../tutorials/packaging-projects.rst:327
msgid ""
"When you are ready to upload a real package to the Python Package Index "
"you can do much the same as you did in this tutorial, but with these "
"important differences:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:331
msgid ""
"Choose a memorable and unique name for your package. You don't have to "
"append your username as you did in the tutorial."
msgstr ""

#: ../../tutorials/packaging-projects.rst:333
msgid ""
"Register an account on https://pypi.org - note that these are two "
"separate servers and the login details from the test server are not "
"shared with the main server."
msgstr ""

#: ../../tutorials/packaging-projects.rst:336
msgid ""
"Use ``twine upload dist/*`` to upload your package and enter your "
"credentials for the account you registered on the real PyPI."
msgstr ""

#: ../../tutorials/packaging-projects.rst:338
msgid ""
"Install your package from the real PyPI using ``pip install [your-"
"package]``."
msgstr ""

#: ../../tutorials/packaging-projects.rst:340
msgid ""
"At this point if you want to read more on packaging Python libraries here"
" are some things you can do:"
msgstr ""

#: ../../tutorials/packaging-projects.rst:343
msgid ""
"Read more about using :ref:`setuptools` to package libraries in "
":doc:`/guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../../tutorials/packaging-projects.rst:345
msgid "Read about :doc:`/guides/packaging-binary-extensions`."
msgstr ""

#: ../../tutorials/packaging-projects.rst:346
msgid ""
"Consider alternatives to :ref:`setuptools` such as :ref:`flit`, `hatch`_,"
" and `poetry`_."
msgstr ""

#~ msgid ""
#~ "This tutorial uses a simple project "
#~ "named ``example_pkg``. If you are "
#~ "unfamiliar with Python's modules and "
#~ ":term:`import packages <import package>`, take"
#~ " a few minutes to read over the"
#~ " `Python documentation for packages and "
#~ "modules`_."
#~ msgstr ""

#~ msgid ""
#~ "Once you create this structure, you'll"
#~ " want to run all of the "
#~ "commands in this tutorial within the "
#~ "top-level folder - so be sure "
#~ "to ``cd example_pkg``."
#~ msgstr ""

#~ msgid ""
#~ "This is just so that you can "
#~ "verify that it installed correctly later"
#~ " in this tutorial."
#~ msgstr ""

#~ msgid ""
#~ "Open :file:`setup.py` and enter the "
#~ "following content, you can personalize "
#~ "the values if you want:"
#~ msgstr ""

#~ msgid ""
#~ "``name`` is the name of your "
#~ "package. This can be any name as"
#~ " long as only contains letters, "
#~ "numbers, ``_`` , and ``-``. It "
#~ "also must not already taken on "
#~ "pypi.org."
#~ msgstr ""

#~ msgid ""
#~ "``classifiers`` tell the index and "
#~ ":ref:`pip` some additional metadata about "
#~ "your package. In this case, the "
#~ "package is only compatible with Python"
#~ " 3, is licensed under the MIT "
#~ "license, and is OS-independent. You "
#~ "should always include at least which "
#~ "version(s) of Python your package works"
#~ " on, which license your package is"
#~ " available under, and which operating "
#~ "systems your package will work on. "
#~ "For a complete list of classifiers, "
#~ "see https://pypi.org/classifiers/."
#~ msgstr ""

#~ msgid ""
#~ "If you get an error that says "
#~ "``The user '[your username]' isn't "
#~ "allowed to upload to project "
#~ "'example-pkg'``, you'll need to go "
#~ "and pick a unique name for your"
#~ " package. A good choice is "
#~ "``example_pkg_your_username``. Update the ``name``"
#~ " argument in :file:`setup.py`, remove the"
#~ " :file:`dist` folder, and :ref:`regenerate "
#~ "the archives <generating archives>`."
#~ msgstr ""

#~ msgid ""
#~ "Once uploaded your package should be "
#~ "viewable on TestPyPI, for example, "
#~ "https://test.pypi.org/project/example-pkg"
#~ msgstr ""

#~ msgid ""
#~ "If you used a different package "
#~ "name in the preview step, replace "
#~ "``example_pkg`` in the command above "
#~ "with your package name."
#~ msgstr ""

#~ msgid ""
#~ "And then import the module and "
#~ "print out the ``name`` property. This"
#~ " should be the same regardless of "
#~ "what you name you gave your "
#~ ":term:`distribution package` in :file:`setup.py` "
#~ "because your :term:`import package` is "
#~ "``example_pkg``."
#~ msgstr ""

#~ msgid ""
#~ "Keep in mind that this tutorial "
#~ "showed you how to upload your "
#~ "package to Test PyPI and Test PyPI"
#~ " is ephemeral. It's not unusual for"
#~ " packages and accounts to be deleted"
#~ " occasionally. If you want to upload"
#~ " your package to the real Python "
#~ "Package Index you can do it by "
#~ "registering an account on https://pypi.org "
#~ "and following the same instructions, "
#~ "however, use ``twine upload dist/*`` to"
#~ " upload your package and enter your"
#~ " credentials for the account you "
#~ "registered on the real PyPI. You "
#~ "can install your package from the "
#~ "real PyPI using ``pip install your-"
#~ "package``."
#~ msgstr ""

